import React, { useState, useRef, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Mic, MicOff } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

interface MicrophoneTestProps {
  className?: string;
}

export const MicrophoneTest: React.FC<MicrophoneTestProps> = ({ className = '' }) => {
  const { toast } = useToast();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const [isTestingMic, setIsTestingMic] = useState(false);
  const [micLevel, setMicLevel] = useState(0);
  const [micPermission, setMicPermission] = useState<'granted' | 'denied' | 'prompt' | null>(null);
  const [micStream, setMicStream] = useState<MediaStream | null>(null);
  
  // Refs –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞—É–¥–∏–æ
  const micAnalyzerRef = useRef<AnalyserNode | null>(null);
  const micAnimationRef = useRef<number | null>(null);
  const isTestingMicRef = useRef<boolean>(false);
  const lastUpdateTime = useRef<number>(0);

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —É—Ä–æ–≤–Ω—è –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const analyzeMicLevel = (forceRun = false) => {
    if (!micAnalyzerRef.current) {
      return;
    }
    
    if (!isTestingMicRef.current && !forceRun) {
      return;
    }

    const currentTime = performance.now();
    
    // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –¥–∞–Ω–Ω—ã–µ
    const bufferLength = micAnalyzerRef.current.frequencyBinCount;
    const floatArray = new Float32Array(bufferLength);
    micAnalyzerRef.current.getFloatTimeDomainData(floatArray);
    
    // –í—ã—á–∏—Å–ª—è–µ–º RMS (Root Mean Square)
    let sum = 0;
    for (let i = 0; i < bufferLength; i++) {
      const sample = floatArray[i];
      sum += sample * sample;
    }
    const rms = Math.sqrt(sum / bufferLength);
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const freqArray = new Uint8Array(bufferLength);
    micAnalyzerRef.current.getByteFrequencyData(freqArray);
    const freqAverage = freqArray.reduce((acc, val) => acc + val, 0) / freqArray.length;
    
    // –ö–∞–ª–∏–±—Ä–æ–≤–∫–∞: –≤—ã—á–∏—Ç–∞–µ–º –±–∞–∑–æ–≤—ã–π —à—É–º
    const noiseFloor = 0.005;
    const calibratedRMS = Math.max(0, rms - noiseFloor);
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ RMS –∏ —á–∞—Å—Ç–æ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    let rmsLevel = calibratedRMS * 20;
    const freqLevel = Math.max(0, freqAverage - 1) / 16;
    
    // –ù–µ–ª–∏–Ω–µ–π–Ω–æ–µ —É—Å–∏–ª–µ–Ω–∏–µ
    rmsLevel = Math.pow(rmsLevel, 0.6);
    
    // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    let combinedLevel = Math.max(rmsLevel * 0.95, freqLevel * 0.05);
    combinedLevel = Math.min(combinedLevel, 1.0);
    
    // –°–≥–ª–∞–∂–∏–≤–∞–Ω–∏–µ
    const smoothedLevel = micLevel * 0.1 + combinedLevel * 0.9;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 100–º—Å
    if (currentTime - lastUpdateTime.current > 100 || forceRun) {
      setMicLevel(smoothedLevel);
      lastUpdateTime.current = currentTime;
    }
    
    if (isTestingMicRef.current || forceRun) {
      micAnimationRef.current = requestAnimationFrame(() => analyzeMicLevel());
    }
  };

  // –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const startMicTest = async () => {
    try {
      setMicLevel(0);
      
      if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
        throw new Error('WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ');
      }
      
      const stream = await navigator.mediaDevices.getUserMedia({ 
        audio: { 
          sampleRate: 16000,
          channelCount: 1,
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true
        } 
      });
      
      const tracks = stream.getAudioTracks();
      if (!tracks[0]?.enabled || tracks[0]?.readyState !== 'live') {
        throw new Error('–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
      }
      
      setMicStream(stream);
      setMicPermission('granted');
      
      // –°–æ–∑–¥–∞–µ–º AudioContext
      const AudioContextClass = window.AudioContext || (window as typeof window & { webkitAudioContext: typeof AudioContext }).webkitAudioContext;
      const audioContext = new AudioContextClass();
      
      if (audioContext.state === 'suspended') {
        await audioContext.resume();
      }
      
      const source = audioContext.createMediaStreamSource(stream);
      const analyzer = audioContext.createAnalyser();
      
      analyzer.fftSize = 512;
      analyzer.smoothingTimeConstant = 0.1;
      analyzer.minDecibels = -100;
      analyzer.maxDecibels = -10;
      
      source.connect(analyzer);
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã
      const gainNode = audioContext.createGain();
      gainNode.gain.value = 0;
      source.connect(gainNode);
      gainNode.connect(audioContext.destination);
      
      micAnalyzerRef.current = analyzer;
      setIsTestingMic(true);
      isTestingMicRef.current = true;
      
      // –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π
      setTimeout(() => {
        analyzeMicLevel(true);
      }, 100);
      
      toast({
        title: "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –∑–∞–ø—É—â–µ–Ω",
        description: "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤ –º–∏–∫—Ä–æ—Ñ–æ–Ω, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —É—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞",
      });
      
    } catch (error) {
      setMicPermission('denied');
      setIsTestingMic(false);
      
      toast({
        title: "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É",
        description: `–û—à–∏–±–∫–∞: ${(error as Error).message}`,
        variant: "destructive"
      });
    }
  };

  // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ—Å—Ç–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
  const stopMicTest = () => {
    setIsTestingMic(false);
    isTestingMicRef.current = false;
    setMicLevel(0);
    
    if (micAnimationRef.current) {
      cancelAnimationFrame(micAnimationRef.current);
      micAnimationRef.current = null;
    }
    
    if (micStream) {
      micStream.getTracks().forEach(track => track.stop());
      setMicStream(null);
    }
    
    micAnalyzerRef.current = null;
    
    toast({
      title: "–¢–µ—Å—Ç –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω",
      description: "–ú–∏–∫—Ä–æ—Ñ–æ–Ω –æ—Ç–∫–ª—é—á–µ–Ω",
    });
  };

  // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      if (micAnimationRef.current) {
        cancelAnimationFrame(micAnimationRef.current);
      }
      if (micStream) {
        micStream.getTracks().forEach(track => track.stop());
      }
    };
  }, [micStream]);

  return (
    <div className={`border border-slate-200 rounded-lg p-3 bg-slate-50 ${className}`}>
      <div className="flex items-stretch gap-3">
        <div className="flex-shrink-0">
          <Button 
            size="sm"
            variant={isTestingMic ? "destructive" : "outline"}
            onClick={isTestingMic ? stopMicTest : startMicTest}
          >
            {isTestingMic ? <MicOff className="h-4 w-4" /> : <Mic className="h-4 w-4" />}
          </Button>
        </div>
        <div className="flex-1 flex flex-col justify-center">
          <div className="w-full bg-slate-200 rounded-full h-2 overflow-hidden mb-1">
            <div 
              className={`h-full transition-all duration-75 ${
                micLevel > 0.02 ? (
                  micLevel > 0.7 ? 'bg-green-500' : 
                  micLevel > 0.3 ? 'bg-yellow-500' : 
                  'bg-blue-500'
                ) : 'bg-gray-300'
              }`}
              style={{ width: `${Math.min(Math.max(micLevel * 100, 2), 100)}%` }}
            />
          </div>
          
          <div className="text-xs text-slate-500">
            {isTestingMic ? 
              (micLevel > 0.05 ? 
                `‚úÖ –ú–∏–∫—Ä–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç! –£—Ä–æ–≤–µ–Ω—å: ${Math.round(micLevel * 100 / 5) * 5}%` : 
                'üîá –ì–æ–≤–æ—Ä–∏—Ç–µ –≥—Ä–æ–º—á–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω'
              ) : 
              micPermission === 'denied' ? 
                '‚ùå –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –∑–∞–ø—Ä–µ—â–µ–Ω' :
                '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞'
            }
          </div>
        </div>
      </div>
    </div>
  );
}; 